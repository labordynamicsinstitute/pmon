#!/bin/bash
# Management program for pmon daemon
# $Id$
# $URL$

#*********************************************************
# Find location of bin and confdir directories
#*********************************************************
cur=$(pwd)
cd $(dirname $0)
confdir=$(dirname $(pwd $(dirname $0)))
cd $cur

#************************************************************
# parse args
#************************************************************
set -- $*
action=$1
if [[  -z $2 ]]
then
    node=$(hostname)
else
    node_select=yes
    node=$2
fi
myhost=$(hostname)

#*********************************************************
# Check for existence of pmon.conf
#*********************************************************
   # check for config file
   PMON_CONF=${confdir}/library/config/pmon.$myhost.conf
   if [ ! -f $PMON_CONF ]
   then
      echo "pmon: did not find conf for $myhost, searching for generic conf"
      PMON_CONF=${confdir}/library/config/pmon.conf
   fi
   # Read config file
   if [ ! -f $PMON_CONF ]
   then
      echo "pmanage: ERROR"
      echo "pmon.conf does not exist"
      exit 1
   else
      echo "Using $PMON_CONF"
      source $PMON_CONF
   fi

   cdir=${confdir%%/}
   jdir=${jobdir%%/}
   plim=${plimit}
   nval=${nadj}
   dname=${cdir}/run/db/${dbname}

# set other node-specific parameters

   pidfile=${cdir}/run/$node/pmon.pid 

#*********************************************************
# Check for existence of lock file
#*********************************************************
if [ -f "${dname}.lockfile" ]
then
   pnum=$(cat "${dname}.lockfile")
   if [ "${pnum}" == "" ]
   then
      echo "ERROR: lockfile has no PID"
      exit 1
   else
      if (( $pnum > 0 ))
      then
         until [ ! -f ${dname}.lockfile ]
         do
            echo "DB Lock File Exists: " $(date -u)
            sleep 5
         done 
      fi
   fi
fi


#*********************************************************
#Process one allowed argument
#*********************************************************
function start_pmon
{
   # Start the daemon
   if [ -f $pidfile ]
   then
      prunt=$(ps -o pid $(cat $pidfile) | grep -v PID)
      if (( ${#prunt} > 0 ))
      then
         echo "pmanage: ERROR"
         echo "pmon is already running"
         exit 1
      fi
      ${confdir}/bin/pmon $PMON_CONF
      sleep 1
      prunt=$(ps -o pid $(cat $pidfile ) | grep -v PID)
      if (( ${#prunt} > 0 ))
      then
         echo " "
         echo "Pmon has PID= " $prunt
         echo " "
      else
         echo " "
         echo "Pmon failed to launch"
         echo " "
      fi 
   else
      ${confdir}/bin/pmon $PMON_CONF
      if (( ${?} > 0 ))
      then
         exit 1
      else
         sleep 1
         prunt=$(ps -o pid $(cat $pidfile) | grep -v PID)
         echo " "
         echo "Pmon has PID= " $prunt
         echo " "
      fi
   fi
}

#************************************************************
   # Stop the daemon
function stop_pmon
{
   if [ -f $pidfile ]
   then
      prunt=$(ps -o pid $(cat $pidfile) | grep -v PID)
      if (( ${#prunt} == 0 ))
      then
         echo "pmanage: ERROR"
         echo "pmon is not running"
         exit 1
      fi
   else
      echo "pmanage: ERROR"
      echo "pmon is not running"
      exit 1
   fi
   echo " "
   echo "---------------------------------------------------------"
   echo "Stopping pmon daemon in 5 seconds"
   echo "location=  ${confdir}/bin/pmon"
   echo "PID= " $prunt
   echo "---------------------------------------------------------"
   echo " "
   echo "To stop pmon from being killed type <ctrl>-C"
   sleep 5
   [[ $myhost = $node ]] && kill ${prunt}
}

#************************************************************
function reload_pmon
{ 
   if [ -f $pidfile ]
   then
      prunt=$(ps -o pid $(cat $pidfile) | grep -v PID)
      if (( ${#prunt} == 0 ))
      then
         echo "pmanage: ERROR"
         echo "pmon is not running"
         exit 1
      fi
   else
      echo "pmanage: ERROR"
      echo "pmon is not running"
      exit 1
   fi
   # Reload the config file
   echo " "
   echo "---------------------------------------------------------"
   echo "Reloading pmon config file in 5 seconds"
   echo "location=  $PMON_CONF"
   echo "PID= " $prunt
   echo "---------------------------------------------------------"
   echo " "
   echo "To stop config file from being reloaded type <ctrl>-C"
   sleep 5
   [[ $myhost = $node ]] && kill -HUP ${prunt}
}
#************************************************************
   # Stop Launching new jobs
function pause_pmon
{
   if [ -f $pidfile ]
   then
      prunt=$(ps -o pid $(cat $pidfile) | grep -v PID)
      if (( ${#prunt} == 0 ))
      then
         echo "pmanage: ERROR"
         echo "pmon is not running"
         exit 1
      fi
   else
      echo "pmanage: ERROR"
      echo "pmon is not running"
      exit 1
   fi
   if [ -f "${dname}.lockfile" ]
   then
      pnum=$(cat "${dname}.lockfile")
      if [ "$pnum" == "" ]
      then
         echo "pmanage: ERROR"
         echo "DB lockfile does not contain a PID"
         exit 1
      else
         if (( $prunt == $pnum ))
         then
            true
         else
            echo " "
            echo "Warning: The current lockfile was not created by pmon"
            echo "Warning: pinfo should not be used at this time"
         fi
      fi
   fi
   echo " "
   echo "---------------------------------------------------------"
   echo "Pausing pmon daemon in 5 seconds"
   echo "location=  ${confdir}/bin/pmon"
   echo "PID= " $prunt
   echo "---------------------------------------------------------"
   echo " "
   echo "To continue launching new jobs type <ctrl>-C"
   sleep 5
   [[ $myhost = $node ]] && kill -USR1 ${prunt}
}
#*********************************************************************
   # Resume Launching new jobs
function resume_pmon
{
   if [ -f $pidfile ]
   then
      prunt=$(ps -o pid $(cat $pidfile) | grep -v PID)
      if (( ${#prunt} == 0 ))
      then
         echo "pmanage: ERROR"
         echo "pmon is not running"
         exit 1
      fi
   else
      echo "pmanage: ERROR"
      echo "pmon is not running"
      exit 1
   fi
   if [ -f "${dname}.lockfile" ]
   then
      pnum=$(cat "${dname}.lockfile")
      if [ "$pnum" == "" ]
      then
         echo "pmanage: ERROR"
         echo "DB lockfile does not contain a PID"
         exit 1
      else
         if (( $prunt == $pnum ))
         then
            true
         elif (( 0 == $pnum ))
         then
            true
         else
            echo " "
            echo "Warning: The current lockfile was not created by pmon"
            echo "Warning: pinfo should not be used at this time"
         fi
      fi
   fi
   echo " "
   echo "---------------------------------------------------------"
   echo "Resuming pmon daemon in 5 seconds"
   echo "location=  ${confdir}/bin/pmon"
   echo "PID= " $prunt
   echo "---------------------------------------------------------"
   echo " "
   echo "To stop resume of pmon daemon type <ctrl>-C"
   sleep 5
   [[ $myhost = $node ]] && kill -USR2 ${prunt}
   if [ -f "${dname}.lockfile" ]
   then
      pnum=$(cat "${dname}.lockfile")
      if [ "$pnum" == "" ]
      then
         echo "pmanage: ERROR"
         echo "DB lockfile does not contain a PID"
         exit 1
      else
         if (( $prunt == $pnum ))
         then
            true
         else
            rm -f "${dname}.lockfile"
         fi
      fi
   fi
}
#************************************************************
function idle_pmon
{
   # Stop pmon from accessing database and monitoring jobs
   if [ -f $pidfile ]
   then
      prunt=$(ps -o pid $(cat $pidfile) | grep -v PID)
      if (( ${#prunt} == 0 ))
      then
         echo "pmanage: ERROR"
         echo "pmon is not running"
         exit 1
      fi
   else
      echo "pmanage: ERROR"
      echo "pmon is not running"
      exit 1
   fi
   if [ -f "${dname}.lockfile" ]
   then
      pnum=$(cat "${dname}.lockfile")
      if [ "$pnum" == "" ]
      then
         echo "pmanage: ERROR"
         echo "DB lockfile does not contain a PID"
         exit 1
      else
         if (( $prunt == $pnum ))
         then
            true
         elif (( 0 == $pnum ))
         then
            echo " "
            echo "pmanage: ERROR"
            echo "pmon is already idled"
            exit 1
         else
            echo " "
            echo "Warning: The current lockfile was not created by pmon"
            echo "Warning: pinfo should not be used at this time"
         fi
      fi
   fi
   echo " "
   echo "---------------------------------------------------------"
   echo "Idling pmon daemon in 5 seconds"
   echo "location=  ${confdir}/bin/pmon"
   echo "PID= " $prunt
   echo "---------------------------------------------------------"
   echo " "
   echo "To continue at current operating status type <ctrl>-C"
   sleep 5
   echo "0" > "${dname}.lockfile" 
}
#************************************************************
function status_pmon
{
   if [ -f $pidfile ]
   then
      prunt=$(ps -o pid $(cat $pidfile) | grep -v PID)
      if (( ${#prunt} > 0 ))
      then
         state=active
         if [ -f ${dname}.lockfile ]
         then
            pnum=$(cat "${dname}.lockfile")
            if [ "$pnum" == "" ]
            then
               echo "pmanage: ERROR"
               echo "DB lockfile does not contain a PID"
               exit 1
            else
               if (( $prunt == $pnum ))
               then
                  true
               elif (( 0 == $pnum ))
               then
                  state=idled
               fi
            fi
         fi
      else
         state=inactive
      fi
   else
      state=inactive
   fi

   echo " "
   echo "-----------------------------------------------------------------------------"
   echo "pmanage: Status Report"
   echo "date :" $(date -u)
   echo "-----------------------------------------------------------------------------"
   echo "Pmanage can determine the following run states: inactive, active, or idled"
   echo "Pmon currently is: " $state
   echo "Pmon PID is      : " $prunt
   echo "-----------------------------------------------------------------------------"
   echo "Pause and Resume History (if any)"
   if [ -f ${cdir}/run/log/pmon.log ]
   then
      grep "Job Launching Paused" ${cdir}/run/log/pmon.log
      grep "Job Launching Resumed" ${cdir}/run/log/pmon.log
   fi
   echo "-----------------------------------------------------------------------------"
   echo " "
}
#************************************************************
function usage
{
   echo "Usage: pmanage {start|stop|reload|pause|resume|idle|status}"
   echo "See http://lservices.vrdc.cornell.edu/mediawiki/index.php/KevPMON for more info"

}

function print_warning
{
     echo "Will attempt to $action pmon remotely"
     echo "Result cannot be guaranteed yet."
}

#************************************************************
# run it all
#************************************************************

case "$action" in
   start)
   # Start the daemon
   echo $node = $myhost
   if [[ $node = $myhost ]]
   then
     start_pmon 
   else
     echo "Cannot do $action remotely"
     usage
     exit 2
   fi     
   ;;
   stop)
   # Stop the daemon
   [[ $node = $myhost ]] || print_warning
   stop_pmon
   ;;

   reload)
   [[ $node = $myhost ]] || print_warning
   reload_pmon 
   ;;

   pause)
   [[ $node = $myhost ]] || print_warning
   pause_pmon 
   ;;

   resume)
   [[ $node = $myhost ]] || print_warning
   resume_pmon
   ;;

   idle)
   [[ $node = $myhost ]] || print_warning
   idle_pmon
   ;;

   status)
   status_pmon $node
   ;;
   *)
   usage
   exit 1
   ;;
esac
