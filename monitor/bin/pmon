#!/bin/bash
# $Id$
# $URL$
# Process Monitor Daemon
#*********************************************************
# Overview
# 1. Run Basic Setup Sanity Checks Before Launching Daemon
# 2. If Checks are OK then Launch Daemon
# 3. Enter the Main Daemon Code
# 4. Signal and Error Handling
# 5. Functions Used in Main Daemon While Loop
# 6. The Main Daemon While Loop
#*********************************************************

# get hostname
# openSUSE, SLES, debian
myhost=$(hostname)

#*********************************************************
#*** Run Basic Sanity Checks Before Launching Daemon
#*********************************************************

if [ "$1" != "setsidxxx" ]
then
   cur=$(pwd)
   cd $(dirname $0)
   confdir=$(dirname $(pwd $(dirname $0)))
   cd $cur
   # check for config file
   PMON_CONF=${confdir}/library/config/pmon.$myhost.conf
   if [ ! -f $PMON_CONF ]
   then
      echo "pmon: did not find conf for $myhost, searching for generic conf"
      PMON_CONF=${confdir}/library/config/pmon.conf
   fi
   # Read config file
   if [ ! -f $PMON_CONF ]
   then
      echo "pmon: ERROR"
      echo "pmon.conf does not exist"
      exit 1
   else
      echo "Using $PMON_CONF"
      source $PMON_CONF
   fi

   if (( ($plimit > 0) && ($plimit < 100) ))
   then
      true
   else
      echo "pmon: ERROR"
      echo "Error in pmon.conf: 0<plimit<100 is required"
      exit 1
   fi
   if (( ($nadj >= 0) && ($nadj < 20) ))
   then
      true
   else
      echo "pmon: ERROR"
      echo "Error in pmon.conf: 0<=nadj<20 is required"
      exit 1
   fi
   if [ -d $confdir ]
   then
      cdir=${confdir%%/}
      if [ -d ${cdir}/library ] && [ -d ${cdir}/run/$myhost/log ] && [ -d ${cdir}/run/$myhost/pid ]
      then
         true
      else
         echo "pmon: ERROR"
         echo "Directory structure is incorrect: check library run/$myhost/log run/$myhost/pid"
         exit 1
      fi
      if [[ "${cdir}/library/config/pmon.conf" = "$PMON_CONF" || "${cdir}/library/config/pmon.$myhost.conf" = "$PMON_CONF" ]]
      then
         true
      else
         echo "pmon: ERROR"
         echo "pmon.conf argument is not in the proper location within confdir"
         exit 1
      fi
   else
      echo "pmon: ERROR"
      echo "Error in pmon.conf: confdir does not exist"
      exit 1
   fi
   if [ -f ${cdir}/run/db/${dbname} ]
   then
      tbl=( $(sqlite3 ${cdir}/run/db/${dbname} .tables) )
      if [ "${tbl[0]}" = "jobs" ] && [ "${tbl[1]}" = "jobslog" ] && [ "${tbl[2]}" = "nodeaction" ]
      then
         true
      else
         echo "pmon: ERROR"
         echo "Error in ${dbname}: db structure is incorrect"
         exit 1
      fi
   else
      echo "pmon: ERROR"
      echo "Error in pmon.conf: dbname does not exist or space in full path to file"
      exit 1
   fi
   if [ -d $jobdir ]
   then
      jdir=${jobdir%%/}
   else
      echo "pmon: ERROR"
      echo "Error in pmon.conf: jobdir does not exist"
      exit 1
   fi
   # Check Database for a clean exit
   rkeys=( $(sqlite3 ${cdir}/run/db/${dbname} "begin; SELECT rkey FROM jobs WHERE tstart='yes' AND tfinish='no'; commit;") )
   if (( ${#rkeys[@]} > 0 ))
   then
      echo "pmon: ERROR"
      echo "Database is unclean"
      exit 1
   fi
   unset rkeys
   rkeys=( $(sqlite3 ${cdir}/run/db/${dbname} "begin; SELECT rkey FROM jobs WHERE tstart='no' AND tfinish='yes'; commit;") )
   if (( ${#rkeys[@]} > 0 ))
   then
      echo "pmon: ERROR"
      echo "Database is unclean"
      exit 1
   fi
   unset rkeys
   echo " "
   echo "Configuration passed basic sanity checks"
   echo " "
   echo "---------------------------------------------------------"
   echo "Launching pmon daemon in 5 seconds"
   echo "hostname=$myhost"
   echo "plimit=$plimit"
   echo "nadj=$nadj"
   echo "confdir=$confdir"
   echo "conffile=$(basename $PMON_CONF)"
   echo "dbname=$dbname"
   echo "jobdir=$jobdir"
   echo "---------------------------------------------------------"
   echo " "
   echo "To stop pmon from launching type <ctrl>-C"
   echo " "
   sleep 5
   # LAUNCH DAEMON HERE
   # Don't forget the ampersand at the end of the following statement.
   ssidbin=$(type -p setsid)
   if [ "${ssidbin}" == "" ]
   then
      echo "pmon: ERROR"
      echo "setsid not found"
      exit 1
   else
      ${ssidbin} ${cdir}/bin/pmon setsidxxx < /dev/null >> ${cdir}//run/$myhost/log/pmon.log 2>> ${cdir}//run/$myhost/log/pmon.log &
   fi
   echo $! > ${cdir}/run/$myhost/pmon.pid
   exit 0
fi

shift

#*********************************************************
#*** The Daemon Code Begins Here 
#*********************************************************

# Read config file
myhost=$(hostname)
cur=$(pwd)
cd $(dirname $0)
confdir=$(dirname $(pwd $(dirname $0)))
PMON_CONF=${confdir}/library/config/pmon.$myhost.conf
if [ ! -f $PMON_CONF ]
then
      PMON_CONF=${confdir}/library/config/pmon.conf
fi
cd $cur
source $PMON_CONF
cdir=${confdir%%/}
jdir=${jobdir%%/}
plim=${plimit}
nval=${nadj}
dname=${cdir}/run/db/${dbname}
ran_range=4 # range of random locks pause
dran_range=$ran_range
let "dran_range += $ran_range" # double the range

# Turn Debugging On(1) or Off(0)
debug=0

# Set default value of pause
pause=no

#Set umask appropriately
umask $pmask

# Don't want to prevent umount
cd /

# Create a dummy pid file for nostart phase
echo "0" > ${cdir}/run/$myhost/pid/pid_0000_0000

# Create a status file
if [ ! -f ${cdir}/run/pmon.$myhost.status ]
then
   echo "0" > ${cdir}/run/pmon.$myhost.status
fi

# Write basic pmon info to the log
echo " "
echo "---------------------------------------------------------"
echo "New pmon daemon started: " $(date -u)
echo "hostname=$myhost"
echo "plimit= $plimit"
echo "nadj= $nadj"
echo "confdir= $confdir"
echo "conffile=$(basename $PMON_CONF)"
echo "dbname= $dbname"
echo "jobdir= $jobdir"
echo "---------------------------------------------------------"
echo " "

#*********************************************************
#*** Signal and Error Handling
#*********************************************************

function fstop {
  echo "fstop function called"
  unset rkeys
  let kline=${LINENO}+1
  rkeys=( $(dbdown ${kline} ${dname} "begin; SELECT rkey FROM jobs WHERE status IN ('pre', 'main', 'post') AND pid>0 and node = '$myhost'; commit;") )
  for i in "${rkeys[@]}"; do
     let kline=${LINENO}+1
     pid=$(dbdown ${kline} ${dname} "begin; SELECT pid FROM jobs WHERE rkey = ${i}; commit;")
     let kline=${LINENO}+1
     pid_file=$(dbdown ${kline} ${dname} "begin; SELECT pid_file FROM jobs WHERE rkey=${i}; commit;")
     let kline=${LINENO}+1
     status=$(dbdown ${kline} ${dname} "begin; SELECT status FROM jobs WHERE rkey=${i}; commit;")
     unset apid
     apid=( $(ps -o pid --ppid ${pid} | grep -v PID | tr '[0-9]' '[0-9]') )
     kill ${pid}
     echo "fstop: PID= ${pid} killed"
     if (( ${#apid[@]} > 0 ))
     then
        for j in "${apid[@]}"; do
           kill ${j}
           echo "fstop: PPID= ${pid} PID= ${j} killed"
        done
     fi
     if [ -f ${cdir}/run/$myhost/pid/${pid_file} ]
     then
        let kline=${LINENO}+1
        rc_status=$(kcat ${kline} ${cdir}/run/$myhost/pid/${pid_file})
        if (( ${#rc_status} > 0 ))
        then
           true
        else
           rc_status=99
        fi
     else
        rc_status=99
     fi
     let kline=${LINENO}+1
     dbup ${kline} ${dname} "begin immediate; update jobs set ${status}_stat='fail', ${status}_exit_status=${rc_status} where rkey=${i}; commit;"
  done
  if [ -f "${dname}.lockfile" ] 
  then
     pnum=$(cat "${dname}.lockfile")
     if [ "${pnum}" == "" ]
     then 
        echo "ERROR: lockfile has no PID"
     else
        if (( $$ == $pnum ))
        then
           echo "PID= $$: Removing DB Lock File: " $(date -u)
           rm -f ${dname}.lockfile
        fi
        if (( 0 == $pnum ))
        then
           echo "PID= $$: Removing DB Lock File: " $(date -u)
           rm -f ${dname}.lockfile
        fi
     fi
  fi
  echo "Pmon killed: " $(date -u)   
  exit 0
}

function freload {
  echo "freload function called"
  source $PMON_CONF
  echo " "
  echo "---------------------------------------------------------"
  echo "pmon config file reloaded: " $(date -u)
  echo "hostname=$myhost"
  echo "plimit= $plimit"
  echo "nadj= $nadj"
  echo "confdir= $confdir"
  echo "conffile=$(basename $PMON_CONF)"
  echo "dbname= $dbname"
  echo "jobdir= $jobdir"
  echo "---------------------------------------------------------"
  echo " "
}

function fpause {
  echo "fpause function called"
  pause=yes
  echo "Job Launching Paused: " $(date -u)
}

function fresume {
  echo "fresume function called"
  pause=no
  echo "Job Launching Resumed: " $(date -u)  
}

function errtrap {
   es=$?
   cmd=$(sed -n -e "${1},${1} p" $0)
   echo "ERROR line $1: $cmd"
   echo "ERROR line $1: Command exited with status $es"
   if (( ${debug} == 1 ))
   then
      echo "ERROR Common Values"
      echo "ERROR     rkeys=" ${rkeys[@]}
      echo "ERROR         i=" $i
      echo "ERROR    dlabel=" $dlabel
      echo "ERROR     njobs=" $njobs
      echo "ERROR       pid=" $pid
      echo "ERROR  pid_file=" $pid_file
      sqlite3 ${dname} "begin; select tstart from jobs where rkey=${i}; commit;" | awk ' { print "ERROR    tstart= " $0 }'
      sqlite3 ${dname} "begin; select tfinish from jobs where rkey=${i}; commit;" | awk ' { print "ERROR    tfinish= " $0 }'
      echo "ERROR Add Variable Values"
      echo "ERROR      rcmd=" $rcmd
      echo "ERROR     rargs=" $rargs
      sqlite3 ${dname} "begin; select pre_stat, main_stat, post_stat, status from jobs where rkey=${i}; commit;" | awk ' { print "ERROR  stat= " $0 }'
      echo "ERROR Remove Variable Values"
      echo "ERROR    status=" $status
      echo "ERROR rc_status=" $rc_status
      echo "ERROR     njobs=" $njobs
      echo "ERROR end line $1 output"
   fi
}

#trap fstop INT QUIT TERM TSTP
trap fstop EXIT
trap freload HUP
trap fpause USR1
trap fresume USR2 
trap 'errtrap ${LINENO}' ERR

#*********************************************************
#*** Functions Used in Main Daemon While Loop
#*********************************************************

# Arguments
# 1 line number (+1)
# 2 DB name
# 3 SQL statements in double quotes
function dbdown {
   local rc ct val
   rc=1
   let ct=0
   until (( $rc == 0 )); do
      val=$(sqlite3 ${2} "pragma temp_store=2; pragma synchronous=0; ${3} begin; commit;")
      rc=$?
      if (( $rc > 0 ))
      then
         echo "WARNING line $1: sqlite3 ${3}" >&2
         echo "WARNING line $1: Command exited with status $rc" >&2
         sleep 1
      fi
      let ct=$ct+1
      if (( $ct > 9 ))
      then
         echo "WARNING line $1: COMMAND FAILED" >&2
         return 1
      fi
   done
   echo $val
}

# Arguments
# 1 line number (+1)
# 2 DB name
# 3 SQL statements in double quotes
function dbup {
   local rc ct
   rc=1
   let ct=0
   until (( $rc == 0 )); do
      #sleep 1
      sqlite3 ${2} "pragma temp_store=2; pragma synchronous=0; ${3} begin; commit;"
      rc=$?
      #echo "rc=${rc} : sqlite3 ${2} ${3}"
      if (( $rc > 0 ))
      then
         echo "WARNING line $1: sqlite3 ${3}" >&2
         echo "WARNING line $1: Command exited with status $rc" >&2
         sleep 1
      fi
      let ct=$ct+1
      if (( $ct > 9 ))
      then
         echo "WARNING line $1: COMMAND FAILED" >&2
         return 1
      fi
   done
}

# Arguments
# 1 line number (+1)
# 2 file name
function kcat {
   local rc ct
   rc=1
   let ct=0
   until (( $rc == 0 )); do
      cat ${2}
      rc=$?
      if (( $rc > 0 ))
      then
         echo "WARNING line $1: cat ${2}" >&2
         echo "WARNING line $1: Command exited with status $rc" >&2
         sleep 1
      fi
      let ct=$ct+1
      if (( $ct > 9 ))
      then
         echo "WARNING line $1: COMMAND FAILED" >&2
         return 1
      fi
   done
}

# Arguments
# 1 run stage (pre main post nostart) 
function padd {
   unset tstart dlabel rcmd rargs pid pid_file cstat cpid cpidf ctst ctfi
   if [ "${1}" == "nostart" ]
   then
      sect="pre"
   else
      sect=$1
   fi
   let kline=${LINENO}+1
   dbup ${kline} ${dname} "begin immediate; update jobs set tstart='yes' where rkey=${i}; commit;"
   let kline=${LINENO}+1
   tstart=$(dbdown ${kline} ${dname} "begin; SELECT tstart FROM jobs WHERE rkey = ${i}; commit;")
   let kline=${LINENO}+1
   dlabel=$(dbdown ${kline} ${dname} "begin; SELECT dlabel FROM jobs WHERE rkey = ${i}; commit;")
   let kline=${LINENO}+1
   rcmd=$(dbdown ${kline} ${dname} "begin; SELECT ${sect}_cmd FROM jobs WHERE rkey = ${i}; commit;")
   let kline=${LINENO}+1
   rargs=$(dbdown ${kline} ${dname} "begin; SELECT ${sect}_args FROM jobs WHERE rkey = ${i}; commit;")
   if [ "${1}" == "nostart" ]
   then 
      mkdir -p ${jdir}/${dlabel}
   fi
   if (( ${#sect} > 0 )) && [ "${tstart}" == "yes" ] && (( ${#dlabel} > 0 )) && (( ${#rcmd} > 0 )) && (( ${#rargs} ))
   then
      nice  -n $nval ${cdir}/library/scripts/${rcmd} ${jdir} ${dlabel} ${cdir} ${rargs} < /dev/null >> ${jdir}/${dlabel}/${sect}.log 2>> ${jdir}/${dlabel}/${sect}.log &
      if (( ${?} == 0 ))
      then 
         pid=$!
         pid_file=pid_${sect}_${pid}
         if (( ${#pid} > 0 )) && (( ${#pid_file} > 0 ))
         then
            let kline=${LINENO}+1
            dbup ${kline} ${dname} "begin immediate; update jobs set ${sect}_stat='run', node='$myhost', pid=$pid, pid_file='${pid_file}', tfinish='yes' where rkey=${i}; commit;"
            # Check to verify update (this one is crucial so assume it failed)
            update=bad
            while [ "${update}" == "bad" ]; do
               let kline=${LINENO}+1
               cstat=$(dbdown ${kline} ${dname} "begin; SELECT ${sect}_stat FROM jobs WHERE rkey = ${i}; commit;")
               let kline=${LINENO}+1
               cpid=$(dbdown ${kline} ${dname} "begin; SELECT pid FROM jobs WHERE rkey = ${i}; commit;")
               let kline=${LINENO}+1
               cpidf=$(dbdown ${kline} ${dname} "begin; SELECT pid_file FROM jobs WHERE rkey = ${i}; commit;")
               let kline=${LINENO}+1
               ctst=$(dbdown ${kline} ${dname} "begin; SELECT tstart FROM jobs WHERE rkey = ${i}; commit;")
               let kline=${LINENO}+1
               ctfi=$(dbdown ${kline} ${dname} "begin; SELECT tfinish FROM jobs WHERE rkey = ${i}; commit;")
               if [ "${cstat}" == "run" ] && [ "${cpid}" == "${pid}" ] && [ "${cpidf}" == "${pid_file}" ] && [ "${ctst}" == "yes" ] && [ "${ctfi}" == "yes" ]
               then
                  update=good
               else
                  let kline=${LINENO}+1
                  dbup ${kline} ${dname} "begin immediate; update jobs set ${sect}_stat='run', node='$myhost', pid=$pid, pid_file='${pid_file}', tfinish='yes' where rkey=${i}; commit;"
                  echo "ERROR rkey= ${i}: ADD PROCESS UPDATE FAILURE"
                  sleep 1
               fi
            done
            echo  "Job Launch Successful:" ${i} "dlabel=" ${dlabel} "sect=" ${1} "pid=" ${pid} "node=" ${myhost}
         fi
      else
         echo "Job Launch Failed:" ${i} "dlabel=" ${dlabel} "sect=" ${1}
      fi
   fi
}

#*********************************************************
#*** Main Daemon While Loop
#*********************************************************

declare -i njobs

while true
do
   # keep config file values constant within each loop iteration
   cdir=${confdir%%/}
   jdir=${jobdir%%/}
   plim=${plimit}
   nval=${nadj}
   dname=${cdir}/run/db/${dbname}

   # Check for existence of lock file
   # If the file does not exist then create one
   until ( set -o noclobber; echo "$$" > "${dname}.lockfile") 2> /dev/null;
   do
      echo "DB Lock File Exists: " $(date -u)
      pnum=$(cat "${dname}.lockfile")
      slptime=10

      if [ "${pnum}" == "" ]
      then
         echo "ERROR: lockfile has no PID"
      else
         if (( $$ == $pnum ))
         then
            echo "PID= $$: Removing DB Lock File: " $(date -u)
            rm -f ${dname}.lockfile
         fi
         if (( 0 == $pnum ))
         then
            slptime=60
         fi
      fi
      # make the delay somewhat random
      rannum=$RANDOM
      let "rannum %= $dran_range"
      let "slptime -= $ran_range"
      let "slptime += $rannum"

      sleep $slptime
   done
   echo "PID= $$: Creating DB Lock File: " $(date -u)
   # we now have the lock file.

   # Make a copy of the database before updating
   cp -f ${dname} ${dname}.backup

   # now we start modifying
   
   # update node database with status
   unset srv_status
   let kline=${LINENO}+1   
   srv_status=( $(dbup ${kline} ${dname} "begin; UPDATE nodeaction SET status='running', status_time=DATETIME("now") WHERE  node = '$myhost'; commit;") )
   echo "Set node status."

   # Check and remove process loop
   unset rkeys
   let kline=${LINENO}+1
   rkeys=( $(dbdown ${kline} ${dname} "begin; SELECT rkey FROM jobs WHERE status IN ('pre', 'main', 'post') AND pid>0 and node = '$myhost'; commit;") )
   njobs=${#rkeys[@]}
   echo "Entering Check for and Remove Process Loop: " $(date -u)
   echo "Processing the following rkeys: " ${rkeys[@]}

   ##### CHECK FOR AND THEN REMOVE FINISHED PROCESSES #####

   for i in "${rkeys[@]}"; do
      unset pid dlabel tstart pid_file status rc_status cstat cexit ctst ctfi
      let kline=${LINENO}+1
      pid=$(dbdown ${kline} ${dname} "begin; SELECT pid FROM jobs WHERE rkey = ${i}; commit;")
      let kline=${LINENO}+1
      dlabel=$(dbdown ${kline} ${dname} "begin; SELECT dlabel FROM jobs WHERE rkey = ${i}; commit;")
      if (( ${#pid} > 0 )) && (( ${#dlabel} > 0 ))
      then
         if [ ! -d /proc/${pid} ]
         then
            let kline=${LINENO}+1
            dbup ${kline} ${dname} "begin immediate; update jobs set tstart='yes' where rkey=${i}; commit;"
            let kline=${LINENO}+1
            tstart=$(dbdown ${kline} ${dname} "begin; SELECT tstart FROM jobs WHERE rkey = ${i}; commit;")
            let kline=${LINENO}+1
            pid_file=$(dbdown ${kline} ${dname} "begin; SELECT pid_file FROM jobs WHERE rkey=${i}; commit;") 
            let kline=${LINENO}+1
            status=$(dbdown ${kline} ${dname} "begin; SELECT status FROM jobs WHERE rkey=${i}; commit;")
            if [ "${tstart}" == "yes" ] && (( ${#pid_file} > 0 )) && (( ${#status} > 0 ))
            then
               if [ -f ${cdir}/run/$myhost/pid/${pid_file} ]
               then
                  let kline=${LINENO}+1
                  rc_status=$(kcat ${kline} ${cdir}/run/$myhost/pid/${pid_file})
                  if (( ${#rc_status} > 0 ))
                  then
                     if (( $rc_status == 0 ))
                     then
                        statval=finish
                        rcval=${rc_status}
                     else
                        statval=fail
                        rcval=${rc_status}
                     fi
                  else
                     statval=fail
                     rcval=99
                  fi
               else
                  statval=fail
                  rcval=99
               fi
               let kline=${LINENO}+1
               dbup ${kline} ${dname} "begin immediate; update jobs set ${status}_stat='${statval}', ${status}_exit_status=${rcval}, tfinish='yes' where rkey=${i}; commit;"
               # Check to verify update (this one is crucial so assume it failed)
               update=bad
               while [ "${update}" == "bad" ]; do
                  let kline=${LINENO}+1
                  cstat=$(dbdown ${kline} ${dname} "begin; SELECT ${status}_stat FROM jobs WHERE rkey = ${i}; commit;")
                  let kline=${LINENO}+1
                  cexit=$(dbdown ${kline} ${dname} "begin; SELECT ${status}_exit_status FROM jobs WHERE rkey = ${i}; commit;")
                  let kline=${LINENO}+1
                  ctst=$(dbdown ${kline} ${dname} "begin; SELECT tstart FROM jobs WHERE rkey = ${i}; commit;")
                  let kline=${LINENO}+1
                  ctfi=$(dbdown ${kline} ${dname} "begin; SELECT tfinish FROM jobs WHERE rkey = ${i}; commit;")
                  if [ "${cstat}" == "${statval}" ] && [ "${cexit}" == "${rcval}" ] && [ "${ctst}" == "yes" ] && [ "${ctfi}" == "yes" ]
                  then
                     update=good
                  else
                     let kline=${LINENO}+1
                     dbup ${kline} ${dname} "begin immediate; update jobs set ${status}_stat='${statval}', ${status}_exit_status=${rcval}, tfinish='yes' where rkey=${i}; commit;"
                     echo "ERROR rkey= ${i}: REMOVE PROCESS UPDATE FAILURE"
                     sleep 1
                  fi
               done
               echo  "Job Finished:" ${i} "dlabel=" $dlabel "pid=" $pid "status=" ${statval} "rc_status=" $rc_status
               njobs=${njobs}-1
            fi
         fi
      fi
   done

   ####### ADD NEW PROCESSES ########

   #Get number of new processes to add
   if [ "$pause" = "no" ]
   then
      njobs=${plim}-${njobs}
      echo " "
      echo "Entering Add New Processes Loop: " $(date -u)
      unset rkeys
      let kline=${LINENO}+1
      rkeys=( $(dbdown ${kline} ${dname} "begin; SELECT rkey FROM jobs WHERE status IN ('pre') AND pre_stat IN ('fail')  AND node = '$myhost'  LIMIT ${njobs}; commit;") )
      echo "Total processes to add: " ${njobs}
      echo "Processing pre rkeys: " ${rkeys[@]}

      if (( $njobs > 0 ))
      then
         ### Set PRE jobs to run status 
         for i in "${rkeys[@]}"; do
            padd pre
         done
      fi

      njobs=$njobs-${#rkeys[@]} 
      unset rkeys
      let kline=${LINENO}+1
      rkeys=( $(dbdown ${kline} ${dname} "begin; SELECT rkey FROM jobs WHERE status IN ('main') AND main_stat IN ('nostart', 'fail') AND node = '$myhost' LIMIT ${njobs}; commit;") )
      echo "Total processes to add: " ${njobs}
      echo "Processing main rkeys: " ${rkeys[@]}

      if (( $njobs > 0 ))
      then
          ### Set MAIN jobs to run status
          for i in "${rkeys[@]}"; do
             padd main
         done
      fi

      njobs=$njobs-${#rkeys[@]}
      unset rkeys
      let kline=${LINENO}+1
      rkeys=( $(dbdown ${kline} ${dname} "begin; SELECT rkey FROM jobs WHERE status IN ('post') AND post_stat IN ('nostart', 'fail') AND node = '$myhost' LIMIT ${njobs}; commit;") )
      echo "Total processes to add: " ${njobs}
      echo "Processing post rkeys: " ${rkeys[@]}

      if (( $njobs > 0 ))
      then
          ### Set POST jobs to run status
          for i in "${rkeys[@]}"; do
             padd post
         done
      fi

      # getting new jobs: this is the only one where we do NOT
      # condition on node name
      njobs=$njobs-${#rkeys[@]}
      unset rkeys
      let kline=${LINENO}+1
      rkeys=( $(dbdown ${kline} ${dname} "begin; SELECT rkey FROM jobs WHERE status IN ('nostart') AND pre_stat IN ('nostart') LIMIT ${njobs}; commit;") )
      echo "Total processes to add: " ${njobs}
      echo "Processing nostart rkeys: " ${rkeys[@]}
      if (( $njobs > 0 ))
      then
          ### Set NOSTART jobs to run status
          for i in "${rkeys[@]}"; do
             padd nostart
         done
      fi
   fi
   # Write out status of daemon/database across all nodes
   let kline=${LINENO}+1
   total=( $(dbdown ${kline} ${dname} "begin; SELECT rkey FROM jobs; commit;") )
   let kline=${LINENO}+1
   totfa=( $(dbdown ${kline} ${dname} "begin; SELECT rkey FROM jobs WHERE status IN ('finish', 'fail'); commit;") )
   let kline=${LINENO}+1
   totfi=( $(dbdown ${kline} ${dname} "begin; SELECT rkey FROM jobs WHERE status IN ('finish'); commit;") )
   echo " "
   echo "Run Group Overview: " $(date -u)
   echo "Total Jobs              : " ${#total[@]}
   echo "Failed and Finished Jobs: " ${#totfa[@]} 
   echo "Finished Jobs           : " ${#totfi[@]} 
   if (( ${#total[@]} == ${#totfi[@]} ))
   then
      echo "2" > ${cdir}/run/pmon.$myhost.status
   elif (( ${#total[@]} == ${#totfa[@]} ))
   then
      echo "1" > ${cdir}/run/pmon.$myhost.status
   fi
   # Check for unfinished transactions
   unset rkeys
   let kline=${LINENO}+1
   rkeys=( $(dbdown ${kline} ${dname} "begin; SELECT rkey FROM jobs WHERE tstart='yes' AND tfinish='no'; commit;") )
   if (( ${#rkeys[@]} > 0 ))
   then
      echo " "
      echo "INCONSISTENCY: tstart=yes and tfinish=no"
      echo "INCONSISTENCY: rkeys= " ${rkeys[@]}
   fi
   unset rkeys
   let kline=${LINENO}+1
   rkeys=( $(dbdown ${kline} ${dname} "begin; SELECT rkey FROM jobs WHERE tstart='no' AND tfinish='yes'; commit;") )
   if (( ${#rkeys[@]} > 0 ))
   then
      echo " "
      echo "INCONSISTENCY: tstart=no and tfinish=yes"
      echo "INCONSISTENCY: rkeys= " ${rkeys[@]}
   fi
   # Remove the lock file
   if [ -f "${dname}.lockfile" ]
   then
      pnum=$(cat "${dname}.lockfile")
      if [ "${pnum}" == "" ]
      then
         echo "ERROR: lockfile has no PID"
      else
         if (( $$ == $pnum ))
         then
            echo "PID= $$: Removing DB Lock File: " $(date -u)
            rm -f ${dname}.lockfile
         fi
      fi
   fi
   echo "**************************************************************"
   sleep 60
done
